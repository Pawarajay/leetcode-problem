520. Detect Capital

We define the usage of capitals in a word to be right when one of the following cases holds:

All letters in this word are capitals, like "USA".
All letters in this word are not capitals, like "leetcode".
Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.

 

Example 1:

Input: word = "USA"
Output: true
Example 2:

Input: word = "FlaG"
Output: false
 

Constraints:

1 <= word.length <= 100
word consists of lowercase and uppercase English letters.

class Solution {
public:
   bool detectCapitalUse(string word) {
        int countCapital=0;

        for(char &ch:word)
        {
            if(isupper(ch)) 
            countCapital++;
        }
            if( countCapital==0)
            return true;

            if( countCapital== word.length())
            return true;

            if( countCapital==1  && isupper(word[0]) )
            return true;
       
        else
        return false;

    }
  
};

#2486. Append Characters to String to Make Subsequence
You are given two strings s and t consisting of only lowercase English letters.

Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:

Input: s = "coaching", t = "coding"
Output: 4
Explanation: Append the characters "ding" to the end of s so that s = "coachingding".
Now, t is a subsequence of s ("coachingding").
It can be shown that appending any 3 characters to the end of s will never make t a subsequence.
Example 2:

Input: s = "abcde", t = "a"
Output: 0
Explanation: t is already a subsequence of s ("abcde").
Example 3:

Input: s = "z", t = "abcde"
Output: 5
Explanation: Append the characters "abcde" to the end of s so that s = "zabcde".
Now, t is a subsequence of s ("zabcde").
It can be shown that appending any 4 characters to the end of s will never make t a subsequence.
 

Constraints:

1 <= s.length, t.length <= 105
s and t consist only of lowercase English letters.

class Solution {
public:
    int appendCharacters(string s, string t) {

        int m=s.length();
        int n=t.length();

        int i = 0;
        int j = 0;

        while(i < m && j < n)
        {
            if(s[i] == t[j] )
            {
                i++;
                j++;
            }
            else
            {
                i++;
            }
        }
        return n-j;
    }
};
